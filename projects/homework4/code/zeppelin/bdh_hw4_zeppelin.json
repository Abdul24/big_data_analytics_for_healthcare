{"paragraphs":[{"text":"%md\n# 1. Exploratory data analysis of dataset from the Lab\n#### First, We will do some exercise using the data we also used in Spark Lab on our course Lab page.\n#### We need to import some libraries first,","dateUpdated":"Oct 18, 2016 6:16:41 AM","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401461_-1809898073","id":"20161018-061641_440214063","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>1. Exploratory data analysis of dataset from the Lab</h1>\n<h4>First, We will do some exercise using the data we also used in Spark Lab on our course Lab page.</h4>\n<h4>We need to import some libraries first,</h4>\n"},"dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:22"},{"text":"// any import statements go here\n\nimport org.apache.commons.io.IOUtils\nimport java.net.URL\nimport java.nio.charset.Charset","dateUpdated":"Oct 18, 2016 6:16:41 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401461_-1809898073","id":"20161018-061641_596592926","result":{"code":"SUCCESS","type":"TEXT","msg":"import org.apache.commons.io.IOUtils\nimport java.net.URL\nimport java.nio.charset.Charset\n"},"dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:23"},{"text":"%md\n#### Then, load data. We uploaded the data on S3 for easier loading","dateUpdated":"Oct 18, 2016 6:16:41 AM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401461_-1809898073","id":"20161018-061641_336159439","result":{"code":"SUCCESS","type":"HTML","msg":"<h4>Then, load data. We uploaded the data on S3 for easier loading</h4>\n"},"dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:24"},{"text":"// load raw data\n\nval rawCaseEvents = sc.parallelize(\n    IOUtils.toString(\n        new URL(\"https://s3.amazonaws.com/cse8803-rlu39/hw4/case.csv\"),\n        Charset.forName(\"utf8\")).split(\"\\n\"))\n        \nval rawControlEvents = sc.parallelize(\n    IOUtils.toString(\n        new URL(\"https://s3.amazonaws.com/cse8803-rlu39/hw4/control.csv\"),\n        Charset.forName(\"utf8\")).split(\"\\n\"))","dateUpdated":"Oct 18, 2016 6:16:41 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401461_-1809898073","id":"20161018-061641_1949699663","result":{"code":"SUCCESS","type":"TEXT","msg":"rawCaseEvents: org.apache.spark.rdd.RDD[String] = ParallelCollectionRDD[116] at parallelize at <console>:32\nrawControlEvents: org.apache.spark.rdd.RDD[String] = ParallelCollectionRDD[117] at parallelize at <console>:31\n"},"dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:25"},{"text":"%md\n#### Also, define case class for transforming into DataFrame","dateUpdated":"Oct 18, 2016 6:16:41 AM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401461_-1809898073","id":"20161018-061641_149266468","result":{"code":"SUCCESS","type":"HTML","msg":"<h4>Also, define case class for transforming into DataFrame</h4>\n"},"dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:26"},{"text":"// Define case class\ncase class Event(patientId: String, category: String, event: String, dateOffSet: String, value: Double)","dateUpdated":"Oct 18, 2016 6:16:41 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401461_-1809898073","id":"20161018-061641_460627980","result":{"code":"SUCCESS","type":"TEXT","msg":"defined class Event\n"},"dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:27"},{"text":"%md\n#### Now, you should transform the raw dat into DataFrame using defined case class, and register it as table","dateUpdated":"Oct 18, 2016 6:16:41 AM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401461_-1809898073","id":"20161018-061641_95912425","result":{"code":"SUCCESS","type":"HTML","msg":"<h4>Now, you should transform the raw dat into DataFrame using defined case class, and register it as table</h4>\n"},"dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:28"},{"text":"//construct dataframe\n//TODO: transform raw data into Event\nval caseEvents = //\nval controlEvents = //\n\nval Events = caseEvents.union(controlEvents).toDF()\nEvents.registerTempTable(\"Events\")","dateUpdated":"Oct 18, 2016 6:29:59 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401461_-1809898073","id":"20161018-061641_1387391725","dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:29","focus":true},{"text":"%md\n#### Also, make a query and visualize top 10 CASE patient with the highest payment","dateUpdated":"Oct 18, 2016 6:16:41 AM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401461_-1809898073","id":"20161018-061641_515282949","result":{"code":"SUCCESS","type":"HTML","msg":"<h4>Also, make a query and visualize top 10 CASE patient with the highest payment</h4>\n"},"dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:30"},{"text":"%sql\n--TODO: Show the top 10 payment for case patients","dateUpdated":"Oct 18, 2016 6:25:59 AM","config":{"colWidth":12,"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"keys":[{"name":"patientId","index":0,"aggr":"sum"}],"values":[{"name":"value","index":1,"aggr":"sum"}],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401461_-1809898073","id":"20161018-061641_1706459139","dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:31","focus":true},{"text":"%md\n#### Similarly, make a query and visualize top 10 CONTROL patient with the highest payment","dateUpdated":"Oct 18, 2016 6:16:41 AM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401461_-1809898073","id":"20161018-061641_814643488","result":{"code":"SUCCESS","type":"HTML","msg":"<h4>Similarly, make a query and visualize top 10 CONTROL patient with the highest payment</h4>\n"},"dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:32"},{"text":"%sql\n--TODO: Show the top 10 payment for control patients","dateUpdated":"Oct 18, 2016 6:25:36 AM","config":{"colWidth":12,"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"keys":[{"name":"patientId","index":0,"aggr":"sum"}],"values":[{"name":"value","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"patientId","index":0,"aggr":"sum"},"yAxis":{"name":"value","index":1,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401461_-1809898073","id":"20161018-061641_1504853191","dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:33","focus":true},{"text":"// Define helper function if needed\ndef getEventType(s: String): String = {\n    s match {\n    case diag: String if diag.startsWith(\"DIAG\") => \"DIAG\"\n    case drug: String if drug.startsWith(\"DRUG\") => \"DRUG\"\n    case proc: String if proc.startsWith(\"PROC\") => \"procedure\"\n    case \"PAYMENT\" => \"payment\"\n    case \"heartfailure\" => \"heart failure\"\n    case _ => \"otherwise\"\n    }\n}\n\nsqlc.udf.register(\"getEventType\", getEventType _)","dateUpdated":"Oct 18, 2016 6:24:44 AM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401461_-1809898073","id":"20161018-061641_1152670418","dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:34"},{"text":"%md\n#### Next, write a query and visualize the number of CASE/CONTROL patients for each type of event\n##### Hint: You can use `getEventType` defined above","dateUpdated":"Oct 18, 2016 6:16:41 AM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401461_-1809898073","id":"20161018-061641_481735739","result":{"code":"SUCCESS","type":"HTML","msg":"<h4>Next, write a query and visualize the number of CASE/CONTROL patients for each type of event</h4>\n<h5>Hint: You can use <code>getEventType</code> defined above</h5>\n"},"dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:35"},{"text":"%sql\n--TODO: Write a SQL query to show the breakdown of number of case and control patients for different types of events(DIAG, DRUG, PROC, etc)","dateUpdated":"Oct 18, 2016 6:24:16 AM","config":{"colWidth":12,"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"keys":[{"name":"event","index":1,"aggr":"sum"}],"values":[{"name":"count","index":2,"aggr":"sum"}],"groups":[{"name":"category","index":0,"aggr":"sum"}],"scatter":{"xAxis":{"name":"category","index":0,"aggr":"sum"},"yAxis":{"name":"event","index":1,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401461_-1809898073","id":"20161018-061641_519216183","dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:36","focus":true},{"text":"%md\n# 2. Descriptive statistics for HW4 Data\n### Now, let's move to our HW4 again.\n#### First of all, we will define some case classes first.","dateUpdated":"Oct 18, 2016 6:16:41 AM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401462_-1808743826","id":"20161018-061641_1240329920","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>2. Descriptive statistics for HW4 Data</h1>\n<h3>Now, let's move to our HW4 again.</h3>\n<h4>First of all, we will define some case classes first.</h4>\n"},"dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:37"},{"text":"// Define case classes to make it easier to transform to DataFrame\n\ncase class Patient(patientID: String, sex: String, dob: String, dod: String)\ncase class LabResult(patientID: String, date: Long, labName: String, value: String)\ncase class Diagnostic(patientID: String, date: Long, icd9code: String, sequence: Int)\ncase class Medication(patientID: String, date: Long, medicine: String)","dateUpdated":"Oct 18, 2016 6:16:41 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401462_-1808743826","id":"20161018-061641_601204011","result":{"code":"SUCCESS","type":"TEXT","msg":"defined class Patient\ndefined class LabResult\ndefined class Diagnostic\ndefined class Medication\n"},"dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:38"},{"text":"%md\n#### Then, we need to load hw4 data already given to you.\n#### Be careful, you need to CHANGE the path of the file properly.\n#### Also, it would be convenient for you to set up shared folder, if you are using Zeppelin on a virtual environment.\n#### Make given sample code work first, then complete the next loading part also.","dateUpdated":"Oct 18, 2016 6:16:41 AM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401462_-1808743826","id":"20161018-061641_525253742","result":{"code":"SUCCESS","type":"HTML","msg":"<h4>Then, we need to load hw4 data already given to you.</h4>\n<h4>Be careful, you need to CHANGE the path of the file properly.</h4>\n<h4>Also, it would be convenient for you to set up shared folder, if you are using Zeppelin on a virtual environment.</h4>\n<h4>Make given sample code work first, then complete the next loading part also.</h4>\n"},"dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:39"},{"text":"// Read patient data from CSV into a dataframe. Make sure to not use the header!\n// Change the file path as required\n\nval patient = sc.textFile(\"file:///hw4_data/PATIENT.csv\")\n    .map(line => line.split(\",\"))\n    .filter(line => !line(0).contains(\"subject_id\"))\n    .map(line => Patient(line(0), line(1), line(2), line(3)))\n    .toDF()","dateUpdated":"Oct 18, 2016 6:16:41 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401462_-1808743826","id":"20161018-061641_1781852624","result":{"code":"SUCCESS","type":"TEXT","msg":"patient: org.apache.spark.sql.DataFrame = [patientID: string, sex: string, dob: string, dod: string]\n"},"dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:40"},{"text":"// TODO: Similarly, read in Diagnostic. Make sure to read only the relevant columns (subject_id, date, code, sequence)\n\nval diagnostic = //TODO","dateUpdated":"Oct 18, 2016 6:22:05 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401462_-1808743826","id":"20161018-061641_937594153","dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:41","focus":true},{"text":"// Register the DataFrames as temp table to use SQL queries\npatient.toDF().registerTempTable(\"patient\")\ndiagnostic.toDF().registerTempTable(\"diagnostic\")","dateUpdated":"Oct 18, 2016 6:16:41 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401462_-1808743826","id":"20161018-061641_2057411432","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:42"},{"text":"%md\n#### Now that we have successfully loaded the data as tables, we can query them to do analysis.\n#### Discover the gender distribution in hw4 dataset. What are the number of male and female patients?","dateUpdated":"Oct 18, 2016 6:21:21 AM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401462_-1808743826","id":"20161018-061641_132253630","result":{"code":"SUCCESS","type":"HTML","msg":"<h4>Now that we have successfully loaded the data as tables, we can query them to do analysis.</h4>\n<h4>Discover the gender distribution in hw4 dataset. What are the number of male and female patients?</h4>\n"},"dateCreated":"Oct 18, 2016 6:16:41 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:43","dateFinished":"Oct 18, 2016 6:21:15 AM","dateStarted":"Oct 18, 2016 6:21:15 AM","focus":true},{"text":"%sql\n-- TODO: Write a SQL query to determine the number of male and female patients in the data","dateUpdated":"Oct 18, 2016 6:20:07 AM","config":{"colWidth":12,"graph":{"mode":"pieChart","height":300,"optionOpen":true,"keys":[{"name":"sex","index":0,"aggr":"sum"}],"values":[{"name":"_c1","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"sex","index":0,"aggr":"sum"},"yAxis":{"name":"_c1","index":1,"aggr":"sum"}}},"enabled":true,"editorHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401462_-1808743826","id":"20161018-061641_141184765","dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:44","focus":true},{"text":"%md\n#### Next, get the top 10 ICD-9 codes in diagnostics (by number of occurrences). For these top 10 codes, show the breakdown by sex.\n#### Write a SQL query and make a chart similar with the one in the homework description PDF.","dateUpdated":"Oct 18, 2016 6:19:19 AM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401462_-1808743826","id":"20161018-061641_2070399067","result":{"code":"SUCCESS","type":"HTML","msg":"<h4>Next, get the top 10 ICD-9 codes in diagnostics (by number of occurrences). For these top 10 codes, show the breakdown by sex.</h4>\n<h4>Write a SQL query and make a chart similar with the one in the homework description PDF.</h4>\n"},"dateCreated":"Oct 18, 2016 6:16:41 AM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:45","dateFinished":"Oct 18, 2016 6:19:16 AM","dateStarted":"Oct 18, 2016 6:19:16 AM","focus":true},{"text":"%sql\n-- TODO: Write a SQL query to show the breakdown of count of the overall top 10 ICD-9 codes among male and female patients\n-- Try to do this in a single call without creating intermediate tables (use nested queries and/or joins)","dateUpdated":"Oct 18, 2016 6:17:30 AM","config":{"colWidth":12,"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"keys":[{"name":"icd9code","index":0,"aggr":"sum","$$hashKey":"object:654"}],"values":[{"name":"diagCount","index":2,"aggr":"sum","$$hashKey":"object:658"}],"groups":[{"name":"sex","index":1,"aggr":"sum","$$hashKey":"object:656"}],"scatter":{"xAxis":{"name":"icd9code","index":0,"aggr":"sum"},"yAxis":{"name":"sex","index":1,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401462_-1808743826","id":"20161018-061641_1519586728","dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:46","focus":true},{"text":"%md\n# 3. Patient Similarity\nWe will use the list of similar patients you found in Q3 Random Walk with Restart or from Q2 Jaccard Similarity if you could not complete it. If you couldn't complete them both, your out of luck. To get the patient ids, check your output from either line in `Main.scala` then make a List or Set manually or save your results from your application as an RDD to load here.\n\n```\nprintln(Jaccard.jaccardSimilarityOneVsAll(patientGraph, 9))\nprintln(RandomWalk.randomWalkOneVsAll(patientGraph, 9))\n```","dateUpdated":"Oct 18, 2016 6:16:41 AM","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"tableHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401462_-1808743826","id":"20161018-061641_1818607372","result":{"code":"SUCCESS","type":"HTML","msg":"<h1>3. Patient Similarity</h1>\n<p>We will use the list of similar patients you found in Q3 Random Walk with Restart or from Q2 Jaccard Similarity if you could not complete it. If you couldn't complete them both, your out of luck. To get the patient ids, check your output from either line in <code>Main.scala</code> then make a List or Set manually or save your results from your application as an RDD to load here.</p>\n<pre><code>println(Jaccard.jaccardSimilarityOneVsAll(patientGraph, 9))\nprintln(RandomWalk.randomWalkOneVsAll(patientGraph, 9))\n</code></pre>\n"},"dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:47"},{"text":"// TODO - Add the patient ids here or load your RDD / dataframe result\n// and register them into a temp table\n\nval list_similar_patients = List(1) // change this\n\nval similar_patients = sc.parallelize(list_similar_patients)\n    .toDF(\"patientID\")\nsimilar_patients.registerTempTable(\"similar_patients\")\n\n// a helper method if you decide to use it to group your patients by dead and alive\ndef getDeadOrAlive(s: String): String = {\n   if (s.isEmpty()) \"Alive\" else \"Dead\"\n}\n\nsqlc.udf.register(\"getDeadOrAlive\", getDeadOrAlive _)","dateUpdated":"Oct 18, 2016 6:16:41 AM","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401462_-1808743826","id":"20161018-061641_199353453","result":{"code":"SUCCESS","type":"TEXT","msg":"\nlist_similar_patients: List[Int] = List(1)\n\nsimilar_patients: org.apache.spark.sql.DataFrame = [patientID: int]\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n\ngetDeadOrAlive: (s: String)String\n\nres10: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,StringType,Some(List(StringType)))\n"},"dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:48"},{"text":"%sql\n-- TODO: Display the gender ratio in similar patients, change the visualization to a more appropriate one\n\nselect * from similar_patients","dateUpdated":"Oct 18, 2016 6:16:41 AM","config":{"colWidth":6,"editorMode":"ace/mode/sql","graph":{"mode":"table","height":300,"optionOpen":true,"keys":[{"name":"patientID","index":0,"aggr":"sum"}],"values":[],"groups":[],"scatter":{"xAxis":{"name":"patientID","index":0,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401462_-1808743826","id":"20161018-061641_458995251","result":{"code":"SUCCESS","type":"TABLE","msg":"patientID\n1\n","comment":"","msgTable":[[{"value":"1"}]],"columnNames":[{"name":"patientID","index":0,"aggr":"sum"}],"rows":[["1"]]},"dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:49"},{"text":"%sql\n-- TODO: Display the ratio of alive/dead patients in similar patients, change the visualization to a more appropriate one\n\nselect * from similar_patients","dateUpdated":"Oct 18, 2016 6:16:41 AM","config":{"colWidth":6,"editorMode":"ace/mode/sql","graph":{"mode":"table","height":300,"optionOpen":true,"keys":[{"name":"patientID","index":0,"aggr":"sum"}],"values":[],"groups":[],"scatter":{"xAxis":{"name":"patientID","index":0,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401462_-1808743826","id":"20161018-061641_571923533","result":{"code":"SUCCESS","type":"TABLE","msg":"patientID\n1\n","comment":"","msgTable":[[{"value":"1"}]],"columnNames":[{"name":"patientID","index":0,"aggr":"sum"}],"rows":[["1"]]},"dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:50"},{"text":"","dateUpdated":"Oct 18, 2016 6:16:41 AM","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1476771401462_-1808743826","id":"20161018-061641_182015159","dateCreated":"Oct 18, 2016 6:16:41 AM","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:51"}],"name":"BDH_HW4_Zeppelin","id":"2BXPKKEK7","angularObjects":{"2BXHY8UJA":[],"2BX3AG59X":[],"2BXD94H3T":[],"2BWCF9G33":[],"2BYAKGFE9":[]},"config":{"looknfeel":"default"},"info":{}}